[Plugin]
; The plugin ID must be unique and contain no whitespaces.
id = cpp_valuable

; Plugin name
name = Valueable Tag

; Description of the plugin
desc = Tag high priced items with [Valuable]

; Author
author = m8r98a4f2

; Type of plugin
type = pluginRecordModifier

; Cacheable (Cache uses plugin file checksum and settings as validation)
cachable = true

; Active by default
activeDefault = true
visibleDefault = true

; Requirements
requiredRecordTypes = MISC
requiredPlugins = cpp_itemSorterTags

[PluginSettings]
; Options configurable by user in the GUI

; Layout elements of the gui form
description = form:text:Choose which items should be tagged as [Valuable]

; User settings
; Tip: Quick definition of setting with "setting:[type]:[default]:[name]" (no whitespaces near the ':')
;      If your default or name contains ":" then use the alternate definition as own line "fABC:name = Name with : character"
fValuableMinWeight = setting:float:1.0:Min. weight:Determines the minimum weight for a item (So a weightless pencil would not be a valuable).

iRatio = setting:int:50:Value/Weight Ratio:Determines the minimum price to weight ratio for a MISC item to receive a (Valuable) tag.

sTagIdent = setting:string:valuable:TagIdent

; Processing rules added by (active) plugin

[PluginRulesAfterMatch:MISC]
"CVPA - Components" exists, not EDID contains shipment, SPECIAL:TagIdent equals scrap = PluginScript:IsValuable

; Script like actions for applying a more complex modification where a simple rule isn't enough
; Note: Because of the ini base of this file every part before "=" must be unique. So this is accomplished by using
;       LINE* as name. Keep in mind: The number is no sorter - the script is executed in the order defined here.

[PluginScript:IsValuable]
10 = set $weight = record."DATA - Data\Weight"
20 = set $value = record."DATA - Data\Value"
30 = if $weight < $fValuableMinWeight then "set $weight = $fValuableMinWeight"
40 = set $ratio = $value / $weight
50 = if $ratio >= $iRatio then "set TagIdent = $sTagIdent"
