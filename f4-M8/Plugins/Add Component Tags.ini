[Plugin]
; The plugin ID must be unique and contain no whitespaces.
id = cpp_addcomptags

; Plugin name
name = Add Component Tags

; Description of the plugin
desc = Adds component tags to scrappable items, which can be displayed by HUD mods while looting.

; Author
author = m8r98a4f2

; Type of plugin
type = pluginRecordModifier

; Cacheable
cachable = true

; Active by default
activeDefault = true

[PluginSettings]
; Options configurable by user in the GUI.

; Layout elements of the gui form
_description1 = form:text:Configuration of component tags. The default setting work for all common HUD mods.

bRemoveExistingTags = setting:bool:true:Remove existing "{{{...}}}" tags
sStartTag = setting:string:{{{:Start tag
sSeparator = setting:string:, :Separator
sEndTag = setting:string:}}}:End tag


; Processing rules added by (active) plugin
[PluginRulesAfterMatch:MISC]
$bRemoveExistingTags equals true, FULL contains "{{{" = SPECIAL:PregReplace:FULL:"(\s*\{\{\{[^{}]*\}\}\})":""
SPECIAL:TagIdent equals scrap|bottle = PluginScript:AddCompTags

; Script like actions for applying a more complex modification where a simple rule isn't enough
; Note: Because of the ini base of this file every part before "=" must be unique. So this is accomplished by using
;       LINE* as name. Keep in mind: The number is no sorter - the script is executed in the order defined here.

[PluginScript:AddCompTags]
; 	Check count above 0
10 = if count:record."CVPA" = 0 then "end"
; 	Begin adding components to name
20 = set $newName = record."FULL - Name" . $sStartTag
30 = foreach record."CVPA" as $index => @c
; 		Fetch the linked record with the component name in it
40 = 	assign @c = linksto:@c."Component"
50 = 	if $index > 0 then "set $newName = $newName . $sSeparator"
60 = 	set $newName = $newName . @c."FULL - Name"
70 = endforeach
; 	Set generated name to record
80 = set record."FULL - Name" = $newName . $sEndTag
